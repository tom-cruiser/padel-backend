// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  PLAYER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum NotificationType {
  BOOKING_CONFIRMATION
  BOOKING_CANCELLATION
  WAIT_LIST_NOTIFICATION
  ADMIN_MESSAGE
  REMINDER
}

enum RecurrenceType {
  NONE
  WEEKLY
  MONTHLY
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  role          UserRole  @default(PLAYER)
  avatar        String?
  phone         String?
  address       String?
  preferredCourt String?
  language      String    @default("en")
  isActive      Boolean   @default(true)
  refreshToken  String?
  // Membership fields
  membershipStatus   String? // MEMBER, NON_MEMBER
  membershipType     String? // Annual, Monthly, Daily, etc.
  joinDate           DateTime?
  membershipExpiry   DateTime?
  // Privacy
  privacy            String? // public, friends, private
  // Relations
  bookings      Booking[]
  waitList      WaitList[]
  notifications Notification[]
  auditLogs     AuditLog[]
  sentMessages  Message[]  @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  payments      Payment[]
  achievements  Achievement[]
  attendances   Attendance[]
  // Community
  posts         Post[]
  friends       Friend[]    @relation("UserFriends")
  friendOf      Friend[]    @relation("FriendOf")
  @@index([email])
  @@map("users")
}

model Payment {
  id          String   @id @default(cuid())
  userId      String
  amount      Decimal
  method      String
  paidAt      DateTime @default(now())
  details     String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@map("payments")
}

model Achievement {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  awardedAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@map("achievements")
}

model Attendance {
  id          String   @id @default(cuid())
  userId      String
  event       String
  attendedAt  DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@map("attendances")
}

model Post {
  id          String   @id @default(cuid())
  userId      String
  content     String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@map("posts")
}

model Friend {
  id          String   @id @default(cuid())
  userId      String
  friendId    String
  createdAt   DateTime @default(now())
  user        User     @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend      User     @relation("FriendOf", fields: [friendId], references: [id], onDelete: Cascade)
  @@unique([userId, friendId])
  @@index([userId])
  @@index([friendId])
  @@map("friends")
}


model Court {
  id           String   @id @default(cuid())
  name         String   @unique
  color        String
  description  String?
  openingTime  Int      @default(8)  // 8 AM
  closingTime  Int      @default(22) // 10 PM
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  bookings     Booking[]
  waitList     WaitList[]

  @@map("courts")
}

model Booking {
  id              String         @id @default(cuid())
  userId          String
  courtId         String
  date            DateTime
  startTime       Decimal        // Hour (e.g., 8, 8.5, 10)
  endTime         Decimal        // Hour (e.g., 9.5, 11)
  status          BookingStatus  @default(CONFIRMED)
  recurrenceType  RecurrenceType @default(NONE)
  recurrenceEndDate DateTime?
  notes           String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  court           Court          @relation(fields: [courtId], references: [id], onDelete: Cascade)

  @@unique([courtId, date, startTime])
  @@index([userId])
  @@index([courtId])
  @@index([date])
  @@map("bookings")
}

model WaitList {
  id        String   @id @default(cuid())
  userId    String
  courtId   String
  date      DateTime
  startTime Decimal
  endTime   Decimal
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  court     Court    @relation(fields: [courtId], references: [id], onDelete: Cascade)

  @@unique([userId, courtId, date, startTime])
  @@index([courtId, date, startTime])
  @@map("wait_list")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@map("notifications")
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  action      String
  entity      String
  entityId    String?
  details     Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

model Message {
  id          String   @id @default(cuid())
  fromUserId  String
  toUserId    String
  message     String   @db.Text
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sender      User     @relation("SentMessages", fields: [fromUserId], references: [id], onDelete: Cascade)
  receiver    User     @relation("ReceivedMessages", fields: [toUserId], references: [id], onDelete: Cascade)

  @@index([fromUserId])
  @@index([toUserId])
  @@index([toUserId, isRead])
  @@index([createdAt])
  @@map("messages")
}
